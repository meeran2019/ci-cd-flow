--------------------------------------------------------------------------------------------------
TERRAFORM:
--------------------------------------------------------------------------------------------------

Git Hub -> Terraform Cloud		
		
	Terraform Cloud -> Settings -> VCS -> Source	
		
		Terraform -> AWS (Using roles and external ID to solve confused deputy problem)

--------------------------------------------------------------------------------------------------
JENKINS-JAVA FLOW:
--------------------------------------------------------------------------------------------------
jenkinsfile -> Passing the values		

Shared Library:	
		"git -> maven build -> maven site -> Sonarqube code analyse -> waitforqualitygate -> chekmarx -> push to jfrog -> Push to ECR ->  udeploy version import -> deploy to EKS"

--------------------------------------------------------------------------------------------------
ANSIBLE-UDEPLOY FLOW:
--------------------------------------------------------------------------------------------------

WORKFLOW FOR UDEPLOY DEPLOYMENT: 

    Create a base resource -> Add agent to base resource -> Create a component -> Add version to the component -> Create component process -> Create an application -> Add component to the application -> Create application process -> Create application environment -> Add base resource to application environment -> Add component to resource tree -> Run the process in application environment. 

ANSIBLE EXECUTION FOR JAVA:

1. Using ansible git module, download the repository.
2. If any dependency, using ansible-galaxy to download the roles.
3. Download the artifacts from jfrog.
4. Call the metadata(169.254..) to get the agent name.
5. If any vault, it pass as file in playbook.
6. Run the ansible playbook.

--------------------------------------------------------------------------------------------------
JENKINS-.NET FLOW:
--------------------------------------------------------------------------------------------------
jenkinsfile -> Passing the values		

Shared Library:	

	Download source repo from git -> nuget restore to download dependencies -> Sonarqube scanning -> Code build using MS build -> Secuity scanning using Chekmarx -> Create a Nuget Spec file and nuget packaging -> uplaod to artifactory -> Udeploy version import 

--------------------------------------------------------------------------------------------------
JENKINS-NODE.JS FLOW:
--------------------------------------------------------------------------------------------------
jenkinsfile -> Passing the values		

Shared Library:

	Download source repo from git -> NPM Install -> Lint (To validate package.json file by using rules) -> Checkmarx -> Unit test using JEST -> Build using NEST -> Push to Artifactory

--------------------------------------------------------------------------------------------------
JENKINS-PYTHON FLOW:
--------------------------------------------------------------------------------------------------
jenkinsfile -> Passing the values

	Download source repo from git -> Sonarqube -> Checkmarx -> Zip the code -> Publish to artifactory -> Udeploy import -> git remote tag and push to repo. 

--------------------------------------------------------------------------------------------------
CD JAVA FLOW:
--------------------------------------------------------------------------------------------------

1. Using get_url module to download artifacts.
2. Take backup of existing deployment folder.
3. Templating the configuration variable.
4. zip the application files
5. Copy to target server. 


	
